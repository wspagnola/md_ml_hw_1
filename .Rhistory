as.data.frame(filter(taxi_data, hack_license ==2013005430))
as.data.frame(filter(taxi_data, hack_license ==2013005430)) %>% select(hack_license, hour, passenger_count)
summary_license_hour <- taxi_sub %>%
group_by(hack_license, hour ) %>%
summarize(tot_passenger_count = sum(passenger_count))
summary_license_hour
hour <- 0:23
sub_tax_crossed <- crossing(taxi_sub$hack_license, hour)
sub_tax_crossed$hour <- as.numeric(as.character(sub_tax_crossed$hour))
colnames(sub_tax_crossed) <- c("hack_license", "hour")
x <- full_join(sub_tax_crossed, summary_license_hour)
x$tot_passenger_count <- replace(x$tot_passenger_count, is.na(x$tot_passenger_count), 0)
x
x
summary_license_hour
summary_license_hour <- taxi_sub %>%
filter(!is.na(passenger_count)) %>%
group_by(hack_license, hour ) %>%
summarize(tot_passenger_count = sum(passenger_count))
summary_license_hou
summary_license_hour <- taxi_sub %>%
filter(!is.na(passenger_count)) %>%
group_by(hack_license, hour ) %>%
summarize(tot_passenger_count = sum(passenger_count))
summary_license_hour
hour <- 0:23
sub_tax_crossed <- crossing(taxi_sub$hack_license, hour)
sub_tax_crossed$hour <- as.numeric(as.character(sub_tax_crossed$hour))
colnames(sub_tax_crossed) <- c("hack_license", "hour")
x <- full_join(sub_tax_crossed, summary_license_hour)
x$tot_passenger_count <- replace(x$tot_passenger_count, is.na(x$tot_passenger_count), 0)
x
mean(is.na(taxi_subpassenger_count))
mean(is.na(taxi_sub$dropoff_datetime))
taxi_sub$dropoff_datetime
mean(taxi_data$dropoff_datetime)
mean(is.na(taxi_data$dropoff_datetime))
# Get Summary of Pickups By Hour
summary_license_hour <- taxi_sub %>%
filter(!is.na(pickup_datetime)) %>%
group_by(hack_license, hour ) %>%
summarize(tot_pickups = n()))
# Get Summary of Pickups By Hour
summary_total_pickups <- taxi_sub %>%
filter(!is.na(pickup_datetime)) %>%
group_by(hack_license, hour ) %>%
summarize(tot_pickups = n())
summary_total_pickups
x <- full_join(sub_tax_crossed, summary_license_hour, summary_total_pickups )
x <- full_join(sub_tax_crossed, summary_license_hour)
x <- full_join(x, summary_total_pickups)
x$tot_passenger_count <- replace(x$tot_passenger_count, is.na(x$tot_passenger_count), 0)
summary_total_pickups
x <- full_join(sub_tax_crossed, summary_license_hour)
x$tot_passenger_count <- replace(x$tot_passenger_count, is.na(x$tot_passenger_count), 0)
x <- full_join(x, summary_total_pickups)
x$tot_passenger_count <- replace(x$ot_pickups, is.na(x$ot_pickups), 0)
x$tot_pickups <- replace(x$tot_pickups, is.na(x$ot_pickups), 0)
x$tot_pickups <- replace(x$tot_pickups, is.na(x$tot_pickups), 0)
x
# Get Summary of Total Passengers by Hour
summary_license_hour <- taxi_data%>%
filter(!is.na(passenger_count)) %>%
group_by(hack_license, hour ) %>%
summarize(tot_passenger_count = sum(passenger_count))
hour <- 0:23
licence_crossed <- crossing(taxi_data$hack_license, hour)
licence_crossed$hour <- as.numeric(as.character(sub_tax_crossed$hour))
hour <- 0:23
licence_crossed <- crossing(taxi_data$hack_license, hour)
licence_crossed$hour <- as.numeric(as.character(licence_crossed $hour))
colnames(licence_crossed ) <- c("hack_license", "hour")
hour <- 0:23
licence_crossed <- crossing(taxi_data$hack_license, hour)
licence_crossed$hour <- as.numeric(as.character(licence_crossed $hour))
colnames(licence_crossed ) <- c("hack_license", "hour")
hour <- 0:23
licence_crossed <- crossing(taxi_data$hack_license, hour)
licence_crossed$hour <- as.numeric(as.character(licence_crossed $hour))
colnames(licence_crossed ) <- c("hack_license", "hour")
summary_total_passengers_picked_up <- taxi_data%>%
filter(!is.na(passenger_count)) %>%
group_by(hack_license, hour ) %>%
summarize(total_passengers_picked_up = sum(passenger_count))
# Get Summary of Trips Started Stared By Hour
summary_trips_started <- taxi_data %>%
filter(!is.na(pickup_datetime)) %>%
group_by(hack_license, hour ) %>%
summarize(tot_pickups = n())
summary_total_pickups
x <- full_join(sub_tax_crossed, summary_license_hour)
x$tot_passenger_count <- replace(x$tot_passenger_count, is.na(x$tot_passenger_count), 0)
x <- full_join(x, summary_total_pickups)
x$tot_pickups <- replace(x$tot_pickups, is.na(x$tot_pickups), 0)
x
taxidata$hack_license[882015]
taxi_data$hack_license[882015]
taxi_data$hack_license[8815]
filter(taxi_data, hack_license == 2013007606)
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count)
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count)
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count) %>% as.data.frame()
x %>%
filter(hack_license == 2013007606)
summary_total_pickups
x <- full_join(x, summary_total_pickups)
x
x %>%
filter(hack_license == 2013007606)
x <- full_join(x, summary_total_pickups)
x
sub_tax_crossed,
sub_tax_crossed
nrow(sub_tax_crossed)
x <- full_join(licence_crossed , summary_total_passengers_picked_up)
x$tot_passenger_count <- replace(x$tot_passenger_count, is.na(x$tot_passenger_count), 0)
#Extract hours from "pickup_datetime" column and save in separate column as integer vector named "hour"
taxi_data <- taxi_data %>%
mutate(hour = hour(pickup_datetime))
#Use Cross-join to create Data Frame with 24 hour intervals for each driver
hour <- 0:23
licence_crossed <- crossing(taxi_data$hack_license, hour)
licence_crossed$hour <- as.numeric(as.character(licence_crossed $hour))
colnames(licence_crossed ) <- c("hack_license", "hour")
# Create Summary Dataframe of Total Passenger Count grouped by driver and hour
summary_total_passengers_picked_up <- taxi_data%>%
filter(!is.na(passenger_count)) %>%
group_by(hack_license, hour ) %>%
summarize(total_passengers_picked_up = sum(passenger_count))
# Get Summary of Trips Started Stared By Hour
summary_trips_started <- taxi_data %>%
filter(!is.na(pickup_datetime)) %>%
group_by(hack_license, hour ) %>%
summarize(tot_pickups = n())
summary_total_pickups
x <- full_join(licence_crossed , summary_total_passengers_picked_up)
x$total_passengers_picked_up <- replace(x$total_passengers_picked_up, is.na(x$total_passengers_picked_up), 0)
x <- full_join(x, summary_trips_started)
x$trips_started <- replace(x$trips_started, is.na(x$trips_started), 0)
x <- full_join(licence_crossed , summary_total_passengers_picked_up)
x$total_passengers_picked_up <- replace(x$total_passengers_picked_up, is.na(x$total_passengers_picked_up), 0)
x <- full_join(x, summary_trips_started)
x$trips_started <- replace(x$trips_started, is.na(x$trips_started), 0)
summary_trips_started <- taxi_data %>%
filter(!is.na(pickup_datetime)) %>%
group_by(hack_license, hour ) %>%
summarize(trips_started= n())
x <- full_join(licence_crossed , summary_total_passengers_picked_up)
x$total_passengers_picked_up <- replace(x$total_passengers_picked_up, is.na(x$total_passengers_picked_up), 0)
x <- full_join(x, summary_trips_started)
x$trips_started <- replace(x$trips_started, is.na(x$trips_started), 0)
taxi_data$hack_license[8815]
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count)
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count)
##Sanity Check
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count) %>%
as.data.frame() %>%
print
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count)
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count) %>%
as.data.frame() %>%
print()
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(pickup_datetime, passenger_count) %>%
as.data.frame()
x %>%
filter(hack_license == 2013007606)
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(hack_license, pickup_datetime, passenger_count) %>%
as.data.frame()
taxi_data %>%
filter(hack_license == 2013007606) %>%
select(hack_license, pickup_datetime, passenger_count) %>%
as.data.frame()
x %>%
filter(hack_license == 2013007606)
taxi_data <- full_join(x = trips_hw_1, y = fares_hw_1)
nrows(taxi_data)
nrow(taxi_data)
taxi_data <- full_join(x = trips_hw_1, y = fares_hw_1)
(nrow(taxi_data))
taxi_data <- distinct(taxi_data)
(nrow(taxi_data))
part_f_summary$
#Join Summary Datasets together
part_f_summary <- full_join(licence_crossed , summary_total_passengers_picked_up) #Join cross data with
#Extract hours from "pickup_datetime" column and save in separate column as integer vector named "hour"
taxi_data <- taxi_data %>%
mutate(hour = hour(pickup_datetime))
#Use Cross-join to create Data Frame with 24 hour intervals for each driver
hour <- 0:23
licence_crossed <- crossing(taxi_data$hack_license, hour)
licence_crossed$hour <- as.numeric(as.character(licence_crossed $hour))
colnames(licence_crossed ) <- c("hack_license", "hour")
# Create Summary Dataframe of Total Passenger Count grouped by driver and hour
summary_total_passengers_picked_up <- taxi_data%>%
filter(!is.na(passenger_count)) %>%
group_by(hack_license, hour ) %>%
summarize(total_passengers_picked_up = sum(passenger_count))
# Get Summary of Trips Started Stared By Hour
summary_trips_started <- taxi_data %>%
filter(!is.na(pickup_datetime)) %>%
group_by(hack_license, hour ) %>%
summarize(trips_started= n())
#Join Summary Datasets together
part_f_summary <- full_join(licence_crossed , summary_total_passengers_picked_up) #Join cross data with
part_f_summary$total_passengers_picked_up <- replace(part_f_summary$total_passengers_picked_up, is.na(part_f_summary$total_passengers_picked_up), 0)
part_f_summary <- full_join(part_f_summary, summary_trips_started)
part_f_summary$trips_started <- replace(part_f_summary$trips_started, is.na(part_f_summary$trips_started), 0)
part_f_summary
'How should I reconcile pickup_date_times that are missing passenger counts?'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
'
fares <- read_csv("trip_fare_8.csv")
trips <- read_csv("trip_data_8.csv")
'
'
trips_hw_1  <- trips %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
fares_hw_1 <- fares %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
trips_hw_1 %>% arrange(desc(pickup_datetime))
trips_hw_1 %>% arrange(pickup_datetime)
fares_hw_1 %>% arrange(desc(pickup_datetime))
fares_hw_1 %>% arrange(pickup_datetime)
write_csv(x = trips_hw_1, path = "trips_hw_1.csv")
write_csv(x = fares_hw_1, path = "fares_hw_1.csv")
'
trips_hw_1 <- read_csv("trips_hw_1.csv")
summary(trips_hw_1)
#Look at Trip Time
trips_hw_1 %>%
arrange(trip_time_in_secs)
#Filter Trips less than 60 seconds
trips_hw_1 <- trips_hw_1 %>% filter(trip_time_in_secs > 60)
#Generate column of trip time minutes
trips_hw_1 <- trips_hw_1 %>%
mutate(trip_time_in_mins =  (trip_time_in_secs / 60))
#Generate column of trip time Hours
trips_hw_1 <- trips_hw_1 %>%
mutate(trip_time_in_hrs =  (trip_time_in_mins / 60))
#Look at Max Trip Time in descending Order
trips_hw_1 %>%
arrange(desc(trip_time_in_mins))
trips_hw_1 %>%
arrange(desc(trip_time_in_hrs))
#Filter Trip Time to be less than or equal to 3 hours
trips_hw_1 <- trips_hw_1 %>%
filter(trip_time_in_hrs  <= 3)
#Generate column of average speed
trips_hw_1 <- trips_hw_1 %>%
mutate(avg_speed = trip_distance / (trip_time_in_secs / 3600))
#Examing Average Speed
summary(trips_hw_1$avg_speed)
#Filter Average Speed to be Less than or equal to 60
trips_hw_1 <- trips_hw_1 %>%
filter(avg_speed <= 60)
#Filter Average Speed to be greater than or to 10
trips_hw_1 <- trips_hw_1 %>%
filter(avg_speed >= 10)
#Calculate Total Numbwer of Drivers
length(unique(trips_hw_1$hack_license))
#Check Shortest Work Days
trips_hw_1 %>%
group_by(hack_license) %>%
summarize(earliest_start= min(pickup_datetime), latest_finish = max(dropoff_datetime),
workday_in_seconds = as.duration(latest_finish- earliest_start) ) %>%
arrange(workday_in_seconds)
#Check Longest Work Days
trips_hw_1 %>%
group_by(hack_license) %>%
summarize(earliest_start= min(pickup_datetime), latest_finish = max(dropoff_datetime),
workday_in_seconds = as.duration(latest_finish- earliest_start) ) %>%
arrange(desc(workday_in_seconds))
#Look at people who worked more than 16 hours
trips_hw_1 %>%
group_by(hack_license) %>%
summarize(earliest_start= min(pickup_datetime), latest_finish = max(dropoff_datetime),
workday_in_seconds = as.duration(latest_finish- earliest_start) ) %>%
filter(workday_in_seconds > as.duration(16*3600) )
#Look at people who worked less than 1 hour
trips_hw_1 %>%
group_by(hack_license) %>%
summarize(earliest_start= min(pickup_datetime), latest_finish = max(dropoff_datetime),
workday_in_seconds = as.duration(latest_finish- earliest_start) ) %>%
filter(workday_in_seconds < as.duration(3600) )
#Create Boxplot of Distribution of Hack licenses
trips_hw_1 %>%
group_by(hack_license) %>%
summarize(earliest_start= min(pickup_datetime), latest_finish = max(dropoff_datetime),
workday_in_seconds = as.duration(latest_finish- earliest_start) ) %>%
ggplot(aes(x=1, y= as.numeric(workday_in_seconds)/3600))  + geom_boxplot()
#Pull License Numbers of Cab Driver Who Worked at least one Hour
at_least_1hr <- trips_hw_1 %>%
group_by(hack_license) %>%
summarize(earliest_start= min(pickup_datetime), latest_finish = max(dropoff_datetime),
workday_in_seconds = as.duration(latest_finish- earliest_start) ) %>%
filter(workday_in_seconds >= as.duration(3600) ) %>%
pull(hack_license)
#Calculate Rows Deleted
nrow(trips_hw_1) -trips_hw_1 %>%
filter(hack_license %in% at_least_1hr ) %>%
nrow()
#Remove Cab Drivers who Worked less than 1 hours
trips_hw_1 <- trips_hw_1 %>%
filter(hack_license %in% at_least_1hr )
#Remove Rows Where Difference between Dropoff - Pickup and trip_time in secs is greater than 1  minute
trips_hw_1 <- trips_hw_1 %>%
mutate(trip_duration = as.duration(dropoff_datetime - pickup_datetime) ) %>%
mutate(trip_diff = abs(trip_time_in_secs - as.numeric(trip_duration)) ) %>%
filter(trip_diff<= 60)
summary(trips_hw_1$passenger_count)
fares_hw_1 <- read_csv("fares_hw_1.csv")
#Examining fare variables to see amounts that are unreasonable
summary(fares_hw_1)
#filter fare amounts less than $2.50 and unreasonably high fares.
fares_hw_1<- fares_hw_1 %>%
filter(fare_amount>2.5 & fare_amount<=200)
#Reexamining fare amounts. Looks Ok.
summary(fares_hw_1$fare_amount)
#Boxplot to check surcharge distribution
boxplot(fares_hw_1$surcharge)
#filter out surcharges that are negative and too high
fares_hw_1<- fares_hw_1 %>%
filter(surcharge>=0 & surcharge<367.46)
#Filter out 0s for MTA Tax
fares_hw_1<-fares_hw_1 %>%
filter(mta_tax>0)
#Filter out tips greater than $100 and by tip amounts and imputed tip that differ by more than $1
fares_hw_1<-fares_hw_1 %>%
filter(tip_amount<100) %>%
mutate(imputed_tip=total_amount-(fare_amount+surcharge+mta_tax+tip_amount+tolls_amount))
fares_hw_1<-fares_hw_1 %>%
mutate(tip_diff = abs(imputed_tip - tip_amount), tip_diff_amount=abs(tip_diff-tip_amount)) %>%
filter(tip_diff_amount<1)
#Drop irrelevant columns
fares_hw_1<-fares_hw_1 %>%
select(-tip_diff, -tip_diff_amount, -imputed_tip)
#Cleaning tolls by getting rid of amounts that are too high
fares_hw_1<- fares_hw_1%>%
filter(tolls_amount<60)
#See how everything looks
summary(fares_hw_1)
taxi_data <- full_join(x = trips_hw_1, y = fares_hw_1)
(nrow(taxi_data))
taxi_data <- distinct(taxi_data) #Remove Duplicate Rows
(nrow(taxi_data))
taxi_data  %>%
group_by(medallion) %>%
summarize(total_trips = n(),
total_passengers  = sum(passenger_count),
total_time_with_passengers = sum(trip_time_in_hrs),
total_distance = sum(trip_distance))
#NOTE! : Add Earnings once we Merge with fares
#Extract hours from "pickup_datetime" column and save in separate column as integer vector named "hour"
taxi_data <- taxi_data %>%
mutate(hour = hour(pickup_datetime))
#Use Cross-join to create Data Frame with 24 hour intervals for each driver
hour <- 0:23
licence_crossed <- crossing(taxi_data$hack_license, hour)
licence_crossed$hour <- as.numeric(as.character(licence_crossed $hour))
colnames(licence_crossed ) <- c("hack_license", "hour")
# Create Summary Dataframe of Total Passenger Count grouped by driver and hour
summary_total_passengers_picked_up <- taxi_data%>%
filter(!is.na(passenger_count)) %>%
group_by(hack_license, hour ) %>%
summarize(total_passengers_picked_up = sum(passenger_count))
# Get Summary of Trips Started Stared By Hour
summary_trips_started <- taxi_data %>%
filter(!is.na(pickup_datetime)) %>%
group_by(hack_license, hour ) %>%
summarize(trips_started= n())
#Join Summary Datasets together
part_f_summary <- full_join(licence_crossed , summary_total_passengers_picked_up) #Join cross data with
part_f_summary$total_passengers_picked_up <- replace(part_f_summary$total_passengers_picked_up, is.na(part_f_summary$total_passengers_picked_up), 0)
part_f_summary <- full_join(part_f_summary, summary_trips_started)
part_f_summary$trips_started <- replace(part_f_summary$trips_started, is.na(part_f_summary$trips_started), 0)
part_f_summary
'How should I reconcile pickup_date_times that are missing passenger counts?'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
'
fares <- read_csv("trip_fare_8.csv")
trips <- read_csv("trip_data_8.csv")
'
'
trips_hw_1  <- trips %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
fares_hw_1 <- fares %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
trips_hw_1 %>% arrange(desc(pickup_datetime))
trips_hw_1 %>% arrange(pickup_datetime)
fares_hw_1 %>% arrange(desc(pickup_datetime))
fares_hw_1 %>% arrange(pickup_datetime)
write_csv(x = trips_hw_1, path = "trips_hw_1.csv")
write_csv(x = fares_hw_1, path = "fares_hw_1.csv")
'
'
trips_hw_1  <- trips %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
fares_hw_1 <- fares %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
trips_hw_1 %>% arrange(desc(pickup_datetime))
trips_hw_1 %>% arrange(pickup_datetime)
fares_hw_1 %>% arrange(desc(pickup_datetime))
fares_hw_1 %>% arrange(pickup_datetime)
write_csv(x = trips_hw_1, path = "trips_hw_1.csv")
write_csv(x = fares_hw_1, path = "fares_hw_1.csv")
'
'
trips_hw_1  <- trips %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
fares_hw_1 <- fares %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
trips_hw_1 %>% arrange(desc(pickup_datetime))
trips_hw_1 %>% arrange(pickup_datetime)
fares_hw_1 %>% arrange(desc(pickup_datetime))
fares_hw_1 %>% arrange(pickup_datetime)
write_csv(x = trips_hw_1, path = "trips_hw_1.csv")
write_csv(x = fares_hw_1, path = "fares_hw_1.csv")
'
'
trips_hw_1  <- trips %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
fares_hw_1 <- fares %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
trips_hw_1 %>% arrange(desc(pickup_datetime))
trips_hw_1 %>% arrange(pickup_datetime)
fares_hw_1 %>% arrange(desc(pickup_datetime))
fares_hw_1 %>% arrange(pickup_datetime)
write_csv(x = trips_hw_1, path = "trips_hw_1.csv")
write_csv(x = fares_hw_1, path = "fares_hw_1.csv")
'
'
trips_hw_1  <- trips %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
fares_hw_1 <- fares %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
trips_hw_1 %>% arrange(desc(pickup_datetime))
trips_hw_1 %>% arrange(pickup_datetime)
fares_hw_1 %>% arrange(desc(pickup_datetime))
fares_hw_1 %>% arrange(pickup_datetime)
write_csv(x = trips_hw_1, path = "trips_hw_1.csv")
write_csv(x = fares_hw_1, path = "fares_hw_1.csv")
'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
'
fares <- read_csv("trip_fare_8.csv")
trips <- read_csv("trip_data_8.csv")
'
'
trips_hw_1  <- trips %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
fares_hw_1 <- fares %>% filter(pickup_datetime >= ymd_hms("2013-08-15 00:00:00")
& pickup_datetime < ymd_hms("2013-08-16 00:00:00"))
trips_hw_1 %>% arrange(desc(pickup_datetime))
trips_hw_1 %>% arrange(pickup_datetime)
fares_hw_1 %>% arrange(desc(pickup_datetime))
fares_hw_1 %>% arrange(pickup_datetime)
write_csv(x = trips_hw_1, path = "trips_hw_1.csv")
write_csv(x = fares_hw_1, path = "fares_hw_1.csv")
'
#Extract hours from "pickup_datetime" column and save in separate column as integer vector named "hour"
taxi_data <- taxi_data %>%
mutate(hour = hour(pickup_datetime))
#Use Cross-join to create Data Frame with 24 hour intervals for each driver
hour <- 0:23
licence_crossed <- crossing(taxi_data$hack_license, hour)
licence_crossed$hour <- as.numeric(as.character(licence_crossed $hour))
colnames(licence_crossed ) <- c("hack_license", "hour")
# Create Summary Dataframe of Total Passenger Count grouped by driver and hour
summary_total_passengers_picked_up <- taxi_data%>%
filter(!is.na(passenger_count)) %>%
group_by(hack_license, hour ) %>%
summarize(total_passengers_picked_up = sum(passenger_count))
# Get Summary of Trips Started Stared By Hour
summary_trips_started <- taxi_data %>%
filter(!is.na(pickup_datetime)) %>%
group_by(hack_license, hour ) %>%
summarize(trips_started= n())
#Join Summary Datasets together
part_f_summary <- full_join(licence_crossed , summary_total_passengers_picked_up) #Join cross data with
part_f_summary$total_passengers_picked_up <- replace(part_f_summary$total_passengers_picked_up, is.na(part_f_summary$total_passengers_picked_up), 0)
part_f_summary <- full_join(part_f_summary, summary_trips_started)
part_f_summary$trips_started <- replace(part_f_summary$trips_started, is.na(part_f_summary$trips_started), 0)
part_f_summary
sapply(part_f_summart, function(x) sum(is.na(x)))
sapply(part_f_summary, function(x) sum(is.na(x)))
part_f_summary
